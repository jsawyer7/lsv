<div class="plan-details-page">
  <div class="plan-details-header">
    <h2 class="plan-details-title">Plan Details</h2>
  </div>

  <div class="plan-details-card">
    <div class="plan-details-header-section">
      <div class="plan-name-section">
        <div class="plan-name-row">
          <h3 class="plan-name"><%= @plan.name %></h3>
          <span class="plan-status-badge <%= @is_current_plan ? 'active' : 'inactive' %>">
            <%= @is_current_plan ? 'Active' : 'Inactive' %>
          </span>
        </div>
        <p class="plan-description"><%= @plan.description %></p>
      </div>
      <div class="plan-pricing-section">
        <div class="plan-price">
          <span class="currency">$</span>
          <span class="amount"><%= @plan.price.to_i == 0 ? '0' : @plan.price.to_i %></span>
          <span class="plan-billing-cycle">
            <%= @plan.price.to_i == 0 ? 'Free' : "#{@plan.period_unit&.capitalize}ly" %>
          </span>
        </div>
      </div>
    </div>

    <div class="plan-features-section">
      <div class="features-grid">
        <% if @plan.features.present? %>
          <% @plan.features.each do |feature| %>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text"><%= feature %></span>
            </div>
          <% end %>
        <% else %>
          <!-- Default features based on plan -->
          <% if @plan.name.downcase.include?('basic') || @plan.name.downcase.include?('free') %>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Basic Claims</span>
            </div>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Community Access</span>
            </div>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Limited AI Evidence</span>
            </div>
          <% elsif @plan.name.downcase.include?('plus') || @plan.name.downcase.include?('pro') %>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Basic Claims</span>
            </div>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Community Access</span>
            </div>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Unlimited Claims</span>
            </div>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Limited AI Evidence</span>
            </div>
          <% elsif @plan.name.downcase.include?('premium') %>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Basic Claims</span>
            </div>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Community Access</span>
            </div>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Unlimited Claims</span>
            </div>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Advance AI Evidence</span>
            </div>
            <div class="feature-item">
              <i class="fas fa-check feature-icon"></i>
              <span class="feature-text">Priority Support</span>
            </div>
          <% end %>
        <% end %>
      </div>
    </div>

    <div class="plan-actions">
      <% if @is_current_plan %>
        <%= button_to "Cancel Plan", cancel_subscription_settings_path(@plan.chargebee_item_price_id), 
            method: :post, 
            class: "btn btn-cancel-plan",
            data: { 
              confirm: "Are you sure you want to cancel your subscription? You'll continue to have access until the end of your current billing period.",
              turbo: false
            } %>
      <% else %>
        <% if @current_subscription.present? %>
          <% if @plan.price > @current_subscription.chargebee_plan&.price %>
            <%= button_to "Upgrade to #{@plan.name}", chargebee_subscriptions_path(plan_id: @plan.chargebee_item_price_id), 
                method: :post, class: "btn btn-upgrade-plan" %>
          <% else %>
            <%= button_to "Downgrade to #{@plan.name}", chargebee_subscriptions_path(plan_id: @plan.chargebee_item_price_id), 
                method: :post, class: "btn btn-downgrade-plan" %>
          <% end %>
        <% else %>
          <button class="btn btn-select-plan" 
                  data-plan-id="<%= @plan.chargebee_item_price_id %>"
                  data-plan-name="<%= @plan.name %>"
                  data-plan-price="<%= @plan.price %>"
                  data-plan-period="<%= @plan.period_unit %>"
                  onclick="openSubscriptionModal(this); event.stopPropagation(); event.preventDefault();">
            Select Plan
          </button>
        <% end %>
      <% end %>
    </div>
  </div>
</div>

<!-- Subscription Modal -->
<div id="subscriptionModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="subscriptionModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <div class="modal-header-left">
          <button type="button" class="btn-back" onclick="closeSubscriptionModal()">
            <i class="fas fa-arrow-left"></i>
          </button>
          <h5 class="modal-title" id="subscriptionModalLabel">Complete Your Subscription</h5>
        </div>
        <div class="modal-header-right">
          <button type="button" class="btn-maybe-later" onclick="closeSubscriptionModal()">Maybe Later</button>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      
      <div class="modal-body">
        <div class="modal-content-wrapper">
          <!-- Left Side - Payment Form -->
          <div class="payment-section">
            <div class="plan-summary mb-4">
              <div class="plan-summary-card">
                <div class="plan-info">
                  <h4 id="modalPlanName"></h4>
                </div>
                <div class="plan-price">
                  <span class="price-amount" id="modalPlanPrice" style="color: #346FCF; font-weight: 600;"></span>
                  <span class="price-period" id="modalPlanPeriod" style="color: #346FCF;"></span>
                </div>
              </div>
            </div>

            <form id="checkout-form" method="post" action="<%= chargebee_subscriptions_path %>">
              <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
              <input type="hidden" name="plan_id" id="modalPlanId">
              <input type="hidden" name="payment_source_id" id="payment_source_id">

              <div class="payment-method-section">
                <h5 class="mb-3">Payment Method</h5>
                
                <div class="payment-method-option">
                  <div class="payment-method-radio">
                    <input type="radio" id="card-payment" name="payment_method" value="card" checked>
                    <label for="card-payment">
                      <i class="fas fa-credit-card"></i>
                      Credit or debit card
                    </label>
                  </div>
                </div>

                <div class="cb-form mt-3">
                  <div class="mb-3">
                    <label class="form-label">Card Details</label>
                    <div id="cb-card" class="form-control cb-field"></div>
                  </div>
                </div>
              </div>

              <!-- Subscription Date Summary -->
              <div class="subscription-summary mt-4" style="background-color: #f8f9fa; border-radius: 8px; padding: 16px;">
                <div class="summary-item" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0;">
                  <span>Due <span id="billing-date">September 20, 2025</span></span>
                  <span id="billing-amount" style="color: #666; font-weight: 500;"></span>
                </div>
                <div class="summary-item" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0;">
                  <span>Due today</span>
                  <span id="today-amount" style="color: #28a745; font-weight: 500;"></span>
                </div>
              </div>

              <div class="checkout-actions mt-4">
                <button class="btn btn-primary btn-lg w-100" id="pay_btn" type="submit">
                  <span class="btn-text" id="payButtonText">Subscribe Now</span>
                  <span class="btn-loading" style="display: none;">
                    <i class="fas fa-spinner fa-spin"></i> Processing...
                  </span>
                </button>
                
                <div class="security-notice mt-3">
                  <small class="text-muted">
                    <i class="fas fa-lock"></i> Your payment information is secured by Chargebee and never stored on our servers.
                  </small>
                </div>
              </div>
            </form>
          </div>

          <!-- Right Side - Plan Features -->
          <div class="plan-features-section">
            <div class="features-header">
              <h5>What's included in your plan</h5>
            </div>
            
            <div class="features-list" id="modalFeaturesList">
              <!-- Features will be populated dynamically -->
            </div>

            <div class="subscription-timeline" style="text-align: left;">
              <div class="timeline-item">
                <div class="timeline-icon">
                  <i class="fas fa-gift"></i>
                </div>
                <div class="timeline-content" style="text-align: left;">
                  <div class="timeline-date" style="text-align: left;">Today</div>
                  <div class="timeline-title" style="text-align: left;">Start your subscription</div>
                  <div class="timeline-description" style="text-align: left;">Get immediate access to all plan features and start using VeriFaith today.</div>
                </div>
              </div>
              
              <div class="timeline-item">
                <div class="timeline-icon">
                  <i class="fas fa-bell"></i>
                </div>
                <div class="timeline-content" style="text-align: left;">
                  <div class="timeline-date" style="text-align: left;">Next billing cycle</div>
                  <div class="timeline-title" style="text-align: left;">We'll remind you before renewal</div>
                  <div class="timeline-description" style="text-align: left;">You'll receive a notification before your next billing cycle.</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Chargebee.js v2 -->
<script src="https://js.chargebee.com/v2/chargebee.js"></script>
<script>
  // Initialize Chargebee with site configuration
  window.CHARGEBEE_SITE = '<%= ENV['CHARGEBEE_SITE'] %>';
  window.CHARGEBEE_CURRENCY = 'USD';
  window.CHARGEBEE_GATEWAY_ACCOUNT_ID = '<%= ENV.fetch("CHARGEBEE_GATEWAY_ACCOUNT_ID", "") %>';
  window.CHARGEBEE_PUBLISHABLE_KEY = '<%= ENV.fetch("CHARGEBEE_PUBLISHABLE_KEY", "") %>';

  let cbInstance = null;
  let card = null;

  function openSubscriptionModal(button) {
    const planId = button.getAttribute('data-plan-id');
    const planName = button.getAttribute('data-plan-name');
    const planPrice = button.getAttribute('data-plan-price');
    const planPeriod = button.getAttribute('data-plan-period');

    // Set modal content
    document.getElementById('modalPlanId').value = planId;
    document.getElementById('modalPlanName').textContent = planName;
    document.getElementById('modalPlanPrice').textContent = `$${planPrice}/${planPeriod}`;
    document.getElementById('payButtonText').textContent = `Subscribe Now - $${planPrice}/${planPeriod}`;
    
    // Update subscription summary with actual plan price
    document.getElementById('billing-amount').textContent = `$${planPrice}`;
    document.getElementById('today-amount').textContent = `$${planPrice}`;

    // Clean up any existing card component first
    if (card) {
      try {
        card.unmount();
        console.log('Cleaned up existing card component');
      } catch (e) {
        console.log('Error cleaning up existing card component:', e);
      }
      card = null;
    }

    // Clear the card container
    const cardContainer = document.getElementById('cb-card');
    if (cardContainer) {
      cardContainer.innerHTML = '';
    }

    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('subscriptionModal'));
    modal.show();

    // Populate features after modal is shown (with a small delay to ensure DOM is ready)
    setTimeout(() => {
      populateModalFeatures(planId);
    }, 100);

    // Initialize Chargebee after modal is shown
    setTimeout(() => {
      initializeChargebee();
    }, 300);
  }

  function closeSubscriptionModal() {
    const modal = bootstrap.Modal.getInstance(document.getElementById('subscriptionModal'));
    if (modal) {
      modal.hide();
    }
    
    // Clean up card component
    if (card) {
      try {
        card.unmount();
        console.log('Card component cleaned up on close');
      } catch (e) {
        console.log('Error cleaning up card component:', e);
      }
      card = null;
    }
    
    // Clear the card container
    const cardContainer = document.getElementById('cb-card');
    if (cardContainer) {
      cardContainer.innerHTML = '';
    }
  }

  function populateModalFeatures(planId) {
    console.log('Populating features for plan ID:', planId);
    
    const featuresList = document.getElementById('modalFeaturesList');
    if (!featuresList) {
      console.error('Features list element not found');
      return;
    }
    
    // For plan details page, we can get features from the current page
    const featureItems = document.querySelectorAll('.feature-item');
    console.log('Found feature items:', featureItems.length);
    
    // Clear existing features
    featuresList.innerHTML = '';
    
    // Copy features from the current page to the modal
    featureItems.forEach((featureItem, index) => {
      console.log(`Feature ${index + 1}:`, featureItem.textContent.trim());
      const clonedFeature = featureItem.cloneNode(true);
      featuresList.appendChild(clonedFeature);
    });
    
    console.log(`Populated modal with ${featureItems.length} features from plan ${planId}`);
  }

  // Initialize Chargebee
  function initializeChargebee() {
    console.log('Chargebee site:', window.CHARGEBEE_SITE);
    
    if (!window.CHARGEBEE_SITE || window.CHARGEBEE_SITE === '') {
      console.error('Chargebee site not configured');
      alert('Payment configuration error. Please contact support.');
      return;
    }
    
    if (typeof Chargebee === 'undefined') {
      console.error('Chargebee library not loaded, retrying in 100ms...');
      setTimeout(initializeChargebee, 100);
      return;
    }
    
    try {
      // Initialize Chargebee v2
      cbInstance = Chargebee.init({
        site: window.CHARGEBEE_SITE,
        publishableKey: window.CHARGEBEE_PUBLISHABLE_KEY
      });
      console.log('Chargebee v2 instance initialized:', cbInstance);
      
      // Load the components module before creating hosted fields
      console.log('Loading components module...');
      cbInstance.load("components").then(() => {
        console.log('Components module loaded successfully');
        initializeHostedFields(cbInstance);
      }).catch((error) => {
        console.error('Error loading components module:', error);
        alert('Unable to load payment components. Please refresh the page or contact support.');
      });
    } catch (error) {
      console.error('Error initializing Chargebee:', error);
      alert('Unable to initialize payment system. Please refresh the page or contact support.');
    }
  }
  
  function initializeHostedFields(cbInstance) {
    try {
      console.log('Creating hosted fields...');
      
      card = cbInstance.createComponent("card");
      card.mount("#cb-card");
      console.log('Card field mounted successfully ✅');
      
      // Try setting currency on the card component
      if (card.setCurrency) {
        console.log('Setting currency on card component to USD');
        card.setCurrency("USD");
      }
      
      initializeFormSubmission(cbInstance, card);
    } catch (error) {
      console.error('Error creating hosted fields:', error);
      alert('Unable to load payment form. Please refresh the page or contact support.');
      return;
    }
  }
  
  function initializeFormSubmission(cbInstance, card) {
    const form = document.getElementById("checkout-form");
    const payBtn = document.getElementById("pay_btn");
    const btnText = payBtn.querySelector(".btn-text");
    const btnLoading = payBtn.querySelector(".btn-loading");

    form.addEventListener("submit", async function(e) {
      e.preventDefault();
      
      payBtn.disabled = true;
      btnText.style.display = "none";
      btnLoading.style.display = "inline-block";

      try {
        console.log('Tokenizing card details...');
        
        if (!window.CHARGEBEE_CURRENCY || window.CHARGEBEE_CURRENCY === '') {
          console.error('Currency is not defined!');
          alert('Payment configuration error. Please contact support.');
          payBtn.disabled = false;
          btnText.style.display = "inline-block";
          btnLoading.style.display = "none";
          return;
        }
        
        if (!window.CHARGEBEE_GATEWAY_ACCOUNT_ID || window.CHARGEBEE_GATEWAY_ACCOUNT_ID === '') {
          console.error('Gateway Account ID is not defined!');
          alert('Payment configuration error. Please contact support.');
          payBtn.disabled = false;
          btnText.style.display = "inline-block";
          btnLoading.style.display = "none";
          return;
        }
        
        console.log('Attempting to tokenize card...');
        const result = await cbInstance.tokenize(card, {
          currency_code: window.CHARGEBEE_CURRENCY,
          gateway_account_id: window.CHARGEBEE_GATEWAY_ACCOUNT_ID
        });
        console.log('Tokenization result:', result);
        console.log('Token:', result.token, 'Vault Token:', result.vaultToken);
        
        // For Stripe gateway, use vaultToken (Stripe token) instead of token (Chargebee token)
        const tokenToUse = result.vaultToken; // Use Stripe token for Stripe gateway
        if (!tokenToUse || !tokenToUse.startsWith('tok_')) {
          console.error('Invalid Stripe token generated:', tokenToUse);
          alert('Failed to generate a valid payment token. Please check your card details and try again.');
          payBtn.disabled = false;
          btnText.style.display = "inline-block";
          btnLoading.style.display = "none";
          return;
        }

        document.getElementById("payment_source_id").value = tokenToUse;
        console.log('Submitting form with Stripe token:', tokenToUse);
        form.submit();
      } catch (err) {
        console.error('Card tokenization failed:', err);
        console.error('Error details:', {
          message: err.message,
          code: err.code,
          type: err.type
        });
        alert(err && err.message ? err.message : "Payment failed. Please check your card details and try again.");
        payBtn.disabled = false;
        btnText.style.display = "inline-block";
        btnLoading.style.display = "none";
      }
    });
  }

  // Add modal hidden event listener for cleanup
  document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('subscriptionModal');
    if (modal) {
      modal.addEventListener('hidden.bs.modal', function() {
        // Clean up card component when modal is hidden
        if (card) {
          try {
            card.unmount();
            console.log('Card component cleaned up on modal hidden');
          } catch (e) {
            console.log('Error cleaning up card component:', e);
          }
          card = null;
        }
        
        // Clear the card container
        const cardContainer = document.getElementById('cb-card');
        if (cardContainer) {
          cardContainer.innerHTML = '';
        }
      });
    }
  });
</script>
