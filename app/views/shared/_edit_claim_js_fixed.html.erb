<script>
document.addEventListener('DOMContentLoaded', function() {
  const allSources = ['Quran', 'Tanakh', 'Catholic', 'Ethiopian', 'Protestant', 'Historical'];
  const claimInput = document.querySelector('textarea[name="claim[content]"]');
  const evidenceInput = document.querySelector('textarea[name="claim[evidence]"]');
  const charCount = document.getElementById('claim-char-count');
  const claimSourceImgPath = document.getElementById('claim-source-img-path').value;
  const validateEvidenceBtn = document.getElementById('validate-evidence');
  const submitBtn = document.getElementById('submit-claim');
  const editEvidenceBtn = document.getElementById('edit-evidence-btn');
  const sourcesColumns = document.getElementById('sources-columns');
  const primarySourcesList = document.getElementById('primary-sources-list');
  const secondarySourcesList = document.getElementById('secondary-sources-list');
  const primarySourcesField = document.getElementById('primary-sources-field');
  const secondarySourcesField = document.getElementById('secondary-sources-field');
  const overlay = document.querySelector('.processing-overlay');
  let processingTimeout;
  const claimData = JSON.parse(document.getElementById('claim-data').value);

  function showLoader() {
    overlay.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function hideLoader() {
    overlay.classList.remove('active');
    document.body.style.overflow = '';
  }

  function startProcessingTimeout() {
    processingTimeout = setTimeout(() => {
      hideLoader();
      const errorDiv = document.querySelector('.evidence-error');
      errorDiv.textContent = 'The request is taking longer than expected. Please try again.';
      errorDiv.style.display = 'block';
    }, 80000); // 80 seconds timeout
  }

  function clearProcessingTimeout() {
    if (processingTimeout) {
      clearTimeout(processingTimeout);
    }
  }
  
  function createSourceElement(source) {
    const div = document.createElement('div');
    div.className = 'source-item';
    div.setAttribute('data-source', source);
    div.draggable = true;
    div.innerHTML = `
      <img src='${claimSourceImgPath}' class='source-icon' alt=''/>
      <span>${source}</span>
    `;
    return div;
  }

  function updateHiddenFields() {
    const primarySources = Array.from(primarySourcesList.querySelectorAll('.source-item'))
      .map(item => item.getAttribute('data-source'));
    const secondarySources = Array.from(secondarySourcesList.querySelectorAll('.source-item'))
      .map(item => item.getAttribute('data-source'));
    
    primarySourcesField.value = JSON.stringify(primarySources);
    secondarySourcesField.value = JSON.stringify(secondarySources);
  }

  function addDragListeners(element) {
    element.addEventListener('dragstart', (e) => {
      e.dataTransfer.setData('text/plain', e.target.getAttribute('data-source'));
      e.target.classList.add('dragging');
    });

    element.addEventListener('dragend', (e) => {
      e.target.classList.remove('dragging');
    });
  }

  [primarySourcesList, secondarySourcesList].forEach(list => {
    list.addEventListener('dragover', (e) => {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'move';
    });

    list.addEventListener('drop', (e) => {
      e.preventDefault();
      const source = e.dataTransfer.getData('text/plain');
      const sourceElement = document.querySelector(`.source-item[data-source="${source}"]`);
      
      if (sourceElement && sourceElement.parentElement !== e.currentTarget) {
        sourceElement.parentElement.removeChild(sourceElement);
        e.currentTarget.appendChild(sourceElement);
        updateHiddenFields();
      }
    });
  });

  validateEvidenceBtn.addEventListener('click', async function() {
    const evidence = evidenceInput.value;

    if (!evidence) {
      document.querySelector('.evidence-error').textContent = 'Please provide evidence before validating.';
      document.querySelector('.evidence-error').style.display = 'block';
      return;
    }

    showLoader();
    startProcessingTimeout();

    try {
      const response = await fetch('/claims/validate_evidence', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({ 
          evidence,
          sources: allSources
        })
      });

      clearProcessingTimeout();
      hideLoader();

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Validation failed');
      }

      const result = await response.json();
      
      sourcesColumns.style.display = 'flex';
      
      evidenceInput.readOnly = true;
      evidenceInput.style.background = '#f3f4f6';
      evidenceInput.style.color = '#23263b';
      
      editEvidenceBtn.style.display = 'inline-block';
      
      primarySourcesList.innerHTML = '';
      secondarySourcesList.innerHTML = '';
      
      result.primary_sources.forEach(source => {
        const sourceElement = createSourceElement(source);
        addDragListeners(sourceElement);
        primarySourcesList.appendChild(sourceElement);
      });
      
      result.secondary_sources.forEach(source => {
        const sourceElement = createSourceElement(source);
        addDragListeners(sourceElement);
        secondarySourcesList.appendChild(sourceElement);
      });
      
      updateHiddenFields();
      
      validateEvidenceBtn.style.display = 'none';
      submitBtn.style.display = 'inline-block';
      
    } catch (error) {
      document.querySelector('.evidence-error').textContent = error.message || 'Failed to validate evidence. Please try again.';
      document.querySelector('.evidence-error').style.display = 'block';
    }
  });

  editEvidenceBtn.addEventListener('click', showEvidenceStep);

  if (claimInput && charCount) {
    claimInput.addEventListener('input', function() {
      charCount.textContent = claimInput.value.length;
    });
    charCount.textContent = claimInput.value.length;
  }

  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && overlay.classList.contains('active')) {
      hideLoader();
      clearProcessingTimeout();
    }
  });

  function initializeForm() {
    // Populate form with existing data
    claimInput.value = claimData.content || '';
    evidenceInput.value = claimData.evidence || '';
    if(claimInput.value) {
      charCount.textContent = claimInput.value.length;
    }
    
    // Set the validated claim so the generic submit handler works
    window.validatedClaim = claimData.content;

    const hasPrimary = claimData.primary_sources && claimData.primary_sources.length > 0;
    const hasSecondary = claimData.secondary_sources && claimData.secondary_sources.length > 0;

    if (hasPrimary || hasSecondary) {
      // User has validated sources, show step 2 with sources
      sourcesColumns.style.display = 'flex';
      
      evidenceInput.readOnly = true;
      evidenceInput.style.background = '#f3f4f6';
      evidenceInput.style.color = '#23263b';
      
      editEvidenceBtn.style.display = 'inline-block';
      
      claimData.primary_sources.forEach(source => {
        const sourceElement = createSourceElement(source);
        addDragListeners(sourceElement);
        primarySourcesList.appendChild(sourceElement);
      });
      
      if (claimData.secondary_sources) {
        claimData.secondary_sources.forEach(source => {
          const sourceElement = createSourceElement(source);
          addDragListeners(sourceElement);
          secondarySourcesList.appendChild(sourceElement);
        });
      }
      
      updateHiddenFields();
      
      validateEvidenceBtn.style.display = 'none';
      submitBtn.style.display = 'inline-block';
    } else if (claimData.content) {
      // User is editing a claim that hasn't had sources validated yet, show step 2
      sourcesColumns.style.display = 'none';
    }

    // Always start at step 2 in the edit flow
    document.getElementById('claim-step').style.display = 'none';
    document.getElementById('evidence-step').style.display = 'block';
    document.getElementById('validated-claim-display').value = claimData.content;
  }

  function showClaimStepAndResetIllustration() {
    document.getElementById('claim-step').style.display = 'block';
    document.getElementById('evidence-step').style.display = 'none';
    var aiChatbot = document.getElementById('ai-chatbot-container');
    if (aiChatbot) aiChatbot.style.display = 'flex';
    var sourcesColumns = document.getElementById('sources-columns');
    if (sourcesColumns) sourcesColumns.style.display = 'none';
    var errorMessage = document.querySelector('.error-message');
    if (errorMessage) {
      errorMessage.style.display = 'none';
      errorMessage.textContent = '';
    }
    // Greet user
    if (typeof startAIChatbotGreeting === 'function') startAIChatbotGreeting();
  }

  initializeForm();

  // Attach to edit button
  document.querySelectorAll('.edit-btn').forEach(function(btn) {
    btn.addEventListener('click', showClaimStepAndResetIllustration);
  });
});
</script> 