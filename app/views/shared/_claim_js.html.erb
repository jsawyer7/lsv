<%= javascript_tag do %>
  window.validatedClaim = null;

  function showClaimStep() {
    console.log('Showing claim step');
    document.getElementById('claim-step').style.display = 'block';
    document.getElementById('evidence-step').style.display = 'none';
    const errorMessage = document.querySelector('.error-message');
    if (errorMessage) {
      errorMessage.style.display = 'none';
      errorMessage.textContent = '';
    }
    // Show the AI claim assistant greeting
    startAIChatbotGreeting();
  }

  function showClaimStepAndResetIllustration() {
    showClaimStep();
    // Show AI Claim Assistant, hide AI Evidence Assistant
    document.getElementById('ai-chatbot-container').style.display = 'flex';
    document.getElementById('ai-evidence-chatbot-container').style.display = 'none';
    const sourcesColumns = document.getElementById('sources-columns');
    if (sourcesColumns) sourcesColumns.style.display = 'none';
    const errorMessage = document.querySelector('.error-message');
    if (errorMessage) {
      errorMessage.style.display = 'none';
      errorMessage.textContent = '';
    }
    // Show the AI Claim Assistant greeting only on initial load or when returning to claim step
    startAIChatbotGreeting();
  }

  function showEvidenceStep() {
    console.log('Showing evidence step');
    document.getElementById('claim-step').style.display = 'none';
    document.getElementById('evidence-step').style.display = 'block';
    
    const validatedClaimDisplay = document.getElementById('validated-claim-display');
    if (validatedClaimDisplay && window.validatedClaim) {
      validatedClaimDisplay.value = window.validatedClaim;
    }
    // Only show evidence assistant
    document.getElementById('ai-evidence-chatbot-container').style.display = 'flex';
    document.getElementById('ai-chatbot-container').style.display = 'none';
    // Reset evidence assistant chat
    startAIEvidenceChatbot();

    // Make evidence section editable and show Add Evidence button
    const evidencesContainer = document.getElementById('evidences-container');
    const addEvidenceBtn = document.getElementById('add-evidence-btn');
    const editEvidenceBtn = document.getElementById('edit-evidence-btn');
    if (addEvidenceBtn) {
      addEvidenceBtn.disabled = false;
      addEvidenceBtn.style.display = 'inline-block';
    }
    if (editEvidenceBtn) {
      editEvidenceBtn.style.display = 'none';
    }
    if (evidencesContainer) {
      const evidenceTextareas = evidencesContainer.querySelectorAll('.evidence-textarea');
      evidenceTextareas.forEach(textarea => {
        textarea.readOnly = false;
        textarea.style.background = 'white';
        textarea.style.color = 'inherit';
      });
      // Enable all remove evidence buttons (except if only one evidence box)
      const removeBtns = evidencesContainer.querySelectorAll('.remove-evidence-btn');
      const boxes = evidencesContainer.querySelectorAll('.evidence-box');
      removeBtns.forEach(btn => btn.disabled = boxes.length === 1);
    }
    // Hide sources columns
    const sourcesColumns = document.getElementById('sources-columns');
    if (sourcesColumns) sourcesColumns.style.display = 'none';
  }

  // --- AI Evidence Assistant logic ---
  let aiEvidenceChatHistory = [
    { role: "system", content: "You are an expert assistant for evidence suggestion. Help users find a single, clear, and relevant piece of evidence for their claim. Respond conversationally, and always end with: 'Do you want me to add this as evidence? (Yes/No)'" }
  ];

  function appendEvidenceChatMessage(role, text) {
    const messagesDiv = document.getElementById('ai-evidence-chatbot-messages');
    const msg = document.createElement('div');
    msg.className = 'ai-chatbot-message ' + (role === 'user' ? 'user' : 'ai');
    msg.textContent = text;
    messagesDiv.appendChild(msg);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }

  let lastEvidenceSuggestion = '';

  function startAIEvidenceChatbot() {
    const messagesDiv = document.getElementById('ai-evidence-chatbot-messages');
    messagesDiv.innerHTML = '';
    appendEvidenceChatMessage('ai', 'Hi! I am your AI Evidence Assistant. Ask me anything about the evidence you want to add.');
    lastEvidenceSuggestion = '';
    aiEvidenceChatHistory = [
      { role: "system", content: "You are an expert assistant for evidence suggestion. Help users find a single, clear, and relevant piece of evidence for their claim. Respond conversationally, and always end with: 'Do you want me to add this as evidence? (Yes/No)'" }
    ];
  }

  function streamAIEvidenceResponse(userMsg) {
    appendEvidenceChatMessage('ai', 'Thinking...');
    aiEvidenceChatHistory.push({ role: 'user', content: userMsg });
    const messagesDiv = document.getElementById('ai-evidence-chatbot-messages');
    fetch('/ai/evidence_suggestion', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
      },
      body: JSON.stringify({ messages: aiEvidenceChatHistory })
    })
    .then(async response => {
      if (!response.body) throw new Error('No response body');
      messagesDiv.removeChild(messagesDiv.lastChild);
      const reader = response.body.getReader();
      let aiMsg = '';
      let done = false;
      let buffer = '';
      while (!done) {
        const { value, done: doneReading } = await reader.read();
        done = doneReading;
        if (value) {
          const chunk = new TextDecoder().decode(value);
          buffer += chunk;
        }
      }
      // Try to parse the buffered response as JSON
      let evidenceObj = null;
      try {
        // Replace smart quotes with standard quotes
        buffer = buffer.replace(/[""]/g, '"').replace(/['']/g, "'");
        // Try to extract the first {...} block from the buffer
        const match = buffer.match(/{[\s\S]*}/);
        if (match) {
          evidenceObj = JSON.parse(match[0]);
        } else {
          throw new Error('No JSON found');
        }
      } catch (e) {
        appendEvidenceChatMessage('ai', 'Sorry, I could not understand the evidence response.');
        return;
      }
      let formatted = '';
      if (evidenceObj.reference) formatted += 'Reference: ' + evidenceObj.reference + '\n';
      if (evidenceObj.original) formatted += 'Original: ' + evidenceObj.original + '\n';
      if (evidenceObj.translation) formatted += 'Translation: ' + evidenceObj.translation + '\n';
      if (evidenceObj.explanation) formatted += '\n' + evidenceObj.explanation + '\n';
      formatted = formatted.trim() + '\n\nDo you want me to add this as evidence? (Yes/No)';
      // Stream the formatted string character by character into a single chat message
      const aiDiv = document.createElement('div');
      aiDiv.className = 'ai-chatbot-message ai';
      messagesDiv.appendChild(aiDiv);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
      let i = 0;
      function streamChar() {
        if (i <= formatted.length) {
          aiDiv.innerHTML = formatted.slice(0, i).replace(/\n/g, '<br>');
          messagesDiv.scrollTop = messagesDiv.scrollHeight;
          i++;
          setTimeout(streamChar, 12);
        }
      }
      streamChar();
      lastEvidenceSuggestion = JSON.stringify({
        reference: evidenceObj.reference || '',
        original: evidenceObj.original || '',
        translation: evidenceObj.translation || ''
      });
      aiEvidenceChatHistory.push({ role: 'assistant', content: buffer });
    })
    .catch(err => {
      appendEvidenceChatMessage('ai', 'Sorry, there was a problem getting suggestions.');
    });
  }

  // --- AI Chatbot logic ---
  function appendChatMessage(role, text) {
    const messagesDiv = document.getElementById('ai-chatbot-messages');
    const msg = document.createElement('div');
    msg.className = 'ai-chatbot-message ' + (role === 'user' ? 'user' : 'ai');
    msg.textContent = text;
    messagesDiv.appendChild(msg);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }

  function startAIChatbotGreeting() {
    const userName = document.getElementById('claim-form-wrapper')?.dataset.userName || 'there';
    const messagesDiv = document.getElementById('ai-chatbot-messages');
    messagesDiv.innerHTML = '';
    appendChatMessage('ai', `Hi ${userName}, I am your AI Claim Assistant. You can enter your claim in the claim box, or ask me for help or clarification about how to build a strong claim.`);
  }

  function isHelpRequest(text) {
    return /\b(how|what|help|guide|advice|should|can|could|\?)\b/i.test(text);
  }

  function streamAIClaimGuidance(userMsg) {
    appendChatMessage('ai', 'Let me help you...');
    const messagesDiv = document.getElementById('ai-chatbot-messages');
    fetch('/ai/claim_guidance', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
      },
      body: JSON.stringify({ question: userMsg })
    })
    .then(async response => {
      if (!response.body) throw new Error('No response body');
      messagesDiv.removeChild(messagesDiv.lastChild);
      const reader = response.body.getReader();
      let aiMsg = '';
      let done = false;
      const aiDiv = document.createElement('div');
      aiDiv.className = 'ai-chatbot-message ai';
      messagesDiv.appendChild(aiDiv);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
      let buffer = '';
      while (!done) {
        const { value, done: doneReading } = await reader.read();
        done = doneReading;
        if (value) {
          const chunk = new TextDecoder().decode(value);
          buffer += chunk;
          while (buffer.length > 0) {
            aiMsg += buffer[0];
            aiDiv.textContent = aiMsg;
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
            buffer = buffer.slice(1);
            await new Promise(r => setTimeout(r, 12));
          }
        }
      }
    })
    .catch(err => {
      appendChatMessage('ai', 'Sorry, there was a problem getting guidance.');
    });
  }

  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, setting up form handlers');
    showClaimStepAndResetIllustration();
    
    // Set up AI Evidence Assistant event listeners
    const aiEvidenceChatbotSend = document.getElementById('ai-evidence-chatbot-send');
    if (aiEvidenceChatbotSend) {
      aiEvidenceChatbotSend.addEventListener('click', function() {
        const input = document.getElementById('ai-evidence-chatbot-input');
        const text = input.value.trim();
        if (!text) return;
        appendEvidenceChatMessage('user', text);
        input.value = '';
        // If last message was Yes/No prompt, handle accordingly
        if (lastEvidenceSuggestion && /^yes$/i.test(text)) {
          let suggestionObj = {};
          try {
            suggestionObj = JSON.parse(lastEvidenceSuggestion);
          } catch (e) {
            suggestionObj = { reference: '', original: '', translation: '' };
          }
          // Find the first empty evidence box, or add a new one if all are filled
          const evidencesContainer = document.getElementById('evidences-container');
          let textarea = Array.from(evidencesContainer.querySelectorAll('.evidence-textarea')).find(t => !t.value.trim());
          if (!textarea) {
            const addEvidenceBtn = document.getElementById('add-evidence-btn');
            if (addEvidenceBtn && !addEvidenceBtn.disabled) {
              addEvidenceBtn.click();
              setTimeout(() => {
                textarea = Array.from(evidencesContainer.querySelectorAll('.evidence-textarea')).find(t => !t.value.trim());
                if (textarea) textarea.value = formatEvidenceBox(suggestionObj);
              }, 100);
            }
          } else {
            textarea.value = formatEvidenceBox(suggestionObj);
          }
          appendEvidenceChatMessage('ai', 'Added as evidence! You can edit it before submitting.');
          lastEvidenceSuggestion = '';
        } else if (lastEvidenceSuggestion && /^no$/i.test(text)) {
          appendEvidenceChatMessage('ai', 'Okay, let me know if you want to ask about something else.');
          lastEvidenceSuggestion = '';
        } else {
          streamAIEvidenceResponse(text);
        }
      });
    }
    const aiEvidenceChatbotInput = document.getElementById('ai-evidence-chatbot-input');
    if (aiEvidenceChatbotInput) {
      aiEvidenceChatbotInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          const sendBtn = document.getElementById('ai-evidence-chatbot-send');
          if (sendBtn) sendBtn.click();
        }
      });
    }
    
    const form = document.getElementById('claim-form');
    const validateButton = document.getElementById('validate-claim');
    const submitButton = document.getElementById('submit-claim');
    const claimInput = form.querySelector('[name="claim[content]"]');
    const errorMessage = document.querySelector('.error-message');
    const evidenceError = document.querySelector('.evidence-error');
    const submitLoader = document.getElementById('submit-loader-overlay');

    // Validate claim button handler
    validateButton.addEventListener('click', function() {
      console.log('Validate button clicked');
      const content = claimInput.value;
      
      if (!content.trim()) {
        errorMessage.textContent = 'Please enter a claim';
        errorMessage.style.display = 'block';
        return;
      }

      validateButton.disabled = true;
      validateButton.textContent = 'Validating...';

      console.log('Sending validation request for:', content);
      fetch('/claims/validate_claim', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify({ claim: { content: content } })
      })
      .then(response => response.json())
      .then(data => {
        console.log('Validation response:', data);
        if (data.valid) {
          window.validatedClaim = data.cleaned_claim;
          claimInput.value = data.cleaned_claim;
          errorMessage.style.display = 'none';
          // Hide chatbot, show illustration if previously hidden
          document.getElementById('ai-chatbot-container').style.display = 'none';
          showEvidenceStep();
        } else {
          // Hide illustration, show chatbot
          document.getElementById('ai-chatbot-container').style.display = 'flex';
          // Start chatbot with failed claim and error message
          startAIChatbot(content, data.error);
        }
      })
      .catch(error => {
        console.error('Validation error:', error);
        errorMessage.textContent = 'An error occurred while validating the claim';
        errorMessage.style.display = 'block';
      })
      .finally(() => {
        validateButton.disabled = false;
        validateButton.textContent = 'Continue';
      });
    });

    // Form submission handler
    form.addEventListener('submit', function(e) {
      console.log('Form submit triggered');
      e.preventDefault();
      
      let evidences = [];
      if (window.validatedEvidences && window.validatedEvidences.length > 0) {
        // Use the validated evidence sources from LSV service
        evidences = window.validatedEvidences;
      } else {
        // Fallback: combine all evidence textarea values with their sources
        evidences = collectEvidencesWithSources();
      }

      if (evidences.length === 0) {
        console.log('Evidence missing');
        evidenceError.textContent = 'Please enter evidence';
        evidenceError.style.display = 'block';
        return;
      }

      if (!window.validatedClaim) {
        console.log('No validated claim found');
        errorMessage.textContent = 'Please validate your claim first';
        showClaimStep();
        return;
      }

      // Set the final values
      claimInput.value = window.validatedClaim;
      
      const evidencesField = document.getElementById('combined-evidence-field');
      if (evidencesField) {
        evidencesField.value = JSON.stringify(evidences);
      }
      
      console.log('Submitting form with:', {
        finalClaim: claimInput.value,
        finalEvidences: evidences
      });

      // Show loader before submitting
      if(submitLoader) {
        const saveAsDraftField = document.getElementById('save-as-draft-field');
        const loaderText = submitLoader.querySelector('.loader-text');

        if (loaderText && saveAsDraftField && saveAsDraftField.value === 'true') {
          loaderText.textContent = 'Saving claim...';
        } else if (loaderText) {
          loaderText.textContent = 'Submitting claim...';
        }
        
        submitLoader.classList.add('active');
      }

      // Disable the submit button
      submitButton.disabled = true;
      
      // Submit the form
      form.submit();
    });

    // Function to collect evidences with their sources
    function collectEvidencesWithSources() {
      const evidencesContainer = document.getElementById('evidences-container');
      const evidenceTextareas = evidencesContainer ? evidencesContainer.querySelectorAll('.evidence-textarea') : [];
      
      return Array.from(evidenceTextareas).map(textarea => {
        const content = textarea ? textarea.value.trim() : '';
        return {
          evidence: content,
          sources: ['Historical'] // Default source, will be updated by validation
        };
      }).filter(ev => ev.evidence);
    }

    // Chatbot input handler
    const aiChatbotSend = document.getElementById('ai-chatbot-send');
    if (aiChatbotSend) {
      aiChatbotSend.addEventListener('click', function() {
        const input = document.getElementById('ai-chatbot-input');
        const text = input.value.trim();
        if (!text) return;
        appendChatMessage('user', text);
        input.value = '';
        if (isHelpRequest(text)) {
          streamAIClaimGuidance(text);
        } else {
          streamAIResponse(text, '');
        }
      });
    }
    const aiChatbotInput = document.getElementById('ai-chatbot-input');
    if (aiChatbotInput) {
      aiChatbotInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          const sendBtn = document.getElementById('ai-chatbot-send');
          if (sendBtn) sendBtn.click();
        }
      });
    }

    // Update validate evidence logic to collect all evidence values
    const validateEvidenceBtn = document.getElementById('validate-evidence');
    const addEvidenceBtn = document.getElementById('add-evidence-btn');
    if (validateEvidenceBtn) {
      validateEvidenceBtn.addEventListener('click', async function() {
        // Always disable add evidence button immediately
        if (addEvidenceBtn) {
          addEvidenceBtn.disabled = true;
          addEvidenceBtn.style.display = 'none'; // Hide add evidence button after validation
        }
        // Hide AI Evidence Assistant
        const aiEvidenceContainer = document.getElementById('ai-evidence-chatbot-container');
        if (aiEvidenceContainer) aiEvidenceContainer.style.display = 'none';
        // ... rest unchanged ...
      });
    }

    // When editing evidences, show the AI Evidence Assistant again
    const editEvidenceBtn = document.getElementById('edit-evidence-btn');
    if (editEvidenceBtn) {
      editEvidenceBtn.addEventListener('click', function() {
        const aiEvidenceContainer = document.getElementById('ai-evidence-chatbot-container');
        const aiChatbotContainer = document.getElementById('ai-chatbot-container');
        if (aiEvidenceContainer) aiEvidenceContainer.style.display = 'flex';
        if (aiChatbotContainer) aiChatbotContainer.style.display = 'none';
      });
    }

    // Also hide AI Evidence Assistant on form submit
    form.addEventListener('submit', function(e) {
      const aiEvidenceContainer = document.getElementById('ai-evidence-chatbot-container');
      if (aiEvidenceContainer) aiEvidenceContainer.style.display = 'none';
    });
  });

  function openDeleteClaimModal(claimId) {
    var modal = document.getElementById('delete-claim-modal');
    var form = document.getElementById('delete-claim-form');
    form.action = '/claims/' + claimId;
    modal.style.display = 'flex';
    document.body.classList.add('modal-open');
  }
  function closeDeleteClaimModal() {
    var modal = document.getElementById('delete-claim-modal');
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');
  }
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.my-claim-delete-link').forEach(function(link) {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        openDeleteClaimModal(this.getAttribute('data-claim-id'));
      });
    });
  });

  function startAIChatbot(failedClaim, errorMsg) {
    const messagesDiv = document.getElementById('ai-chatbot-messages');
    messagesDiv.innerHTML = '';
    appendChatMessage('user', failedClaim);
    // Start streaming AI response
    streamAIResponse(failedClaim, errorMsg);
  }

  function streamAIResponse(failedClaim, errorMsg) {
    // Show AI is typing...
    appendChatMessage('ai', 'Thinking...');
    // Replace with your backend endpoint for streaming AI (e.g. /ai/claim_suggestion)
    const messagesDiv = document.getElementById('ai-chatbot-messages');
    fetch('/ai/claim_suggestion', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
      },
      body: JSON.stringify({ claim: failedClaim, error: errorMsg })
    })
    .then(async response => {
      if (!response.body) throw new Error('No response body');
      // Remove 'Thinking...' message
      messagesDiv.removeChild(messagesDiv.lastChild);
      const reader = response.body.getReader();
      let aiMsg = '';
      let done = false;
      const aiDiv = document.createElement('div');
      aiDiv.className = 'ai-chatbot-message ai';
      messagesDiv.appendChild(aiDiv);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
      let buffer = '';
      while (!done) {
        const { value, done: doneReading } = await reader.read();
        done = doneReading;
        if (value) {
          const chunk = new TextDecoder().decode(value);
          buffer += chunk;
          // Show letter by letter
          while (buffer.length > 0) {
            aiMsg += buffer[0];
            aiDiv.textContent = aiMsg;
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
            buffer = buffer.slice(1);
            await new Promise(r => setTimeout(r, 12)); // Typing speed (ms per char)
          }
        }
      }
    })
    .catch(err => {
      appendChatMessage('ai', 'Sorry, there was a problem getting suggestions.');
    });
  }

  function formatEvidenceBox(obj) {
    let out = '';
    if (obj.reference) out += 'Reference: ' + obj.reference + '\n';
    if (obj.original) out += 'Original: ' + obj.original + '\n';
    if (obj.translation) out += 'Translation: ' + obj.translation;
    return out.trim();
  }
<% end %>