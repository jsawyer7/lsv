<%= javascript_tag do %>
  window.validatedClaim = null;

  function showClaimStep() {
    console.log('Showing claim step');
    document.getElementById('claim-step').style.display = 'block';
    document.getElementById('evidence-step').style.display = 'none';
  }

  function showClaimStepAndResetIllustration() {
    showClaimStep();
    const claimIllustration = document.getElementById('claim-illustration');
    const sourcesColumns = document.getElementById('sources-columns');
    if (claimIllustration) claimIllustration.style.display = 'block';
    if (sourcesColumns) sourcesColumns.style.display = 'none';
  }

  function showEvidenceStep() {
    console.log('Showing evidence step');
    document.getElementById('claim-step').style.display = 'none';
    document.getElementById('evidence-step').style.display = 'block';
    
    const validatedClaimDisplay = document.getElementById('validated-claim-display');
    if (validatedClaimDisplay && window.validatedClaim) {
      validatedClaimDisplay.value = window.validatedClaim;
    }
    
    // Reset the state of the evidence form to allow re-validation.
    const evidenceInput = document.querySelector('textarea[name="claim[evidence]"]');
    const validateEvidenceBtn = document.getElementById('validate-evidence');
    const submitBtn = document.getElementById('submit-claim');
    const editEvidenceBtn = document.getElementById('edit-evidence-btn');
    const claimIllustration = document.getElementById('claim-illustration');
    const sourcesColumns = document.getElementById('sources-columns');
    const evidenceError = document.querySelector('.evidence-error');
    const addEvidenceBtn = document.getElementById('add-evidence-btn');
    const evidencesContainer = document.getElementById('evidences-container');

    // If sources columns are visible, evidence is validated
    if (sourcesColumns && sourcesColumns.style.display === 'flex') {
      // Evidence validated: show edit evidence button, disable add evidence
      if (editEvidenceBtn) editEvidenceBtn.style.display = 'inline-block';
      if (addEvidenceBtn) {
        addEvidenceBtn.disabled = true;
        addEvidenceBtn.style.display = 'none';
      }
      // Make all evidence textareas readOnly
      if (evidencesContainer) {
        const evidenceTextareas = evidencesContainer.querySelectorAll('.evidence-textarea');
        evidenceTextareas.forEach(textarea => {
          textarea.readOnly = true;
          textarea.style.background = '#f3f4f6';
          textarea.style.color = '#23263b';
        });
        // Disable all remove evidence buttons
        const removeBtns = evidencesContainer.querySelectorAll('.remove-evidence-btn');
        removeBtns.forEach(btn => btn.disabled = true);
      }
    } else {
      // Not validated: hide edit evidence button, enable add evidence, make evidence editable
      if (editEvidenceBtn) editEvidenceBtn.style.display = 'none';
      if (addEvidenceBtn) {
        addEvidenceBtn.disabled = false;
        addEvidenceBtn.style.display = 'inline-block';
      }
      // Make all evidence textareas editable
      if (evidencesContainer) {
        const evidenceTextareas = evidencesContainer.querySelectorAll('.evidence-textarea');
        evidenceTextareas.forEach(textarea => {
          textarea.readOnly = false;
          textarea.style.background = 'white';
          textarea.style.color = 'inherit';
        });
        // Enable all remove evidence buttons (except if only one evidence box)
        const removeBtns = evidencesContainer.querySelectorAll('.remove-evidence-btn');
        const boxes = evidencesContainer.querySelectorAll('.evidence-box');
        removeBtns.forEach(btn => btn.disabled = boxes.length === 1);
      }
    }

    if (validateEvidenceBtn) validateEvidenceBtn.style.display = 'inline-block';
    if (submitBtn) submitBtn.style.display = 'none';
    if (claimIllustration) claimIllustration.style.display = 'block';
    if (sourcesColumns) sourcesColumns.style.display = 'none';
    if (evidenceError) {
      evidenceError.style.display = 'none';
      evidenceError.textContent = '';
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, setting up form handlers');
    
    const form = document.getElementById('claim-form');
    const validateButton = document.getElementById('validate-claim');
    const submitButton = document.getElementById('submit-claim');
    const claimInput = form.querySelector('[name="claim[content]"]');
    const evidenceInput = form.querySelector('[name="claim[evidence]"]');
    const errorMessage = document.querySelector('.error-message');
    const evidenceError = document.querySelector('.evidence-error');
    const submitLoader = document.getElementById('submit-loader-overlay');

    // Validate claim button handler
    validateButton.addEventListener('click', function() {
      console.log('Validate button clicked');
      const content = claimInput.value;
      
      if (!content.trim()) {
        errorMessage.textContent = 'Please enter a claim';
        errorMessage.style.display = 'block';
        return;
      }

      validateButton.disabled = true;
      validateButton.textContent = 'Validating...';

      console.log('Sending validation request for:', content);
      fetch('/claims/validate_claim', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify({ claim: { content: content } })
      })
      .then(response => response.json())
      .then(data => {
        console.log('Validation response:', data);
        if (data.valid) {
          window.validatedClaim = data.cleaned_claim;
          claimInput.value = data.cleaned_claim;
          errorMessage.style.display = 'none';
          showEvidenceStep();
        } else {
          errorMessage.textContent = data.error;
          errorMessage.style.display = 'block';
        }
      })
      .catch(error => {
        console.error('Validation error:', error);
        errorMessage.textContent = 'An error occurred while validating the claim';
        errorMessage.style.display = 'block';
      })
      .finally(() => {
        validateButton.disabled = false;
        validateButton.textContent = 'Continue';
      });
    });

    // Form submission handler
    form.addEventListener('submit', function(e) {
      console.log('Form submit triggered');
      e.preventDefault();
      
      // Combine all evidence textarea values into one string
      const evidencesContainer = document.getElementById('evidences-container');
      const evidenceTextareas = evidencesContainer ? evidencesContainer.querySelectorAll('.evidence-textarea') : [];
      const combinedEvidence = Array.from(evidenceTextareas).map(t => t.value.trim()).filter(Boolean).join('\n');
      const combinedEvidenceField = document.getElementById('combined-evidence-field');
      if (combinedEvidenceField) combinedEvidenceField.value = combinedEvidence;

      const evidence = combinedEvidence;
      console.log('Current values:', {
        claim: claimInput.value,
        validatedClaim: window.validatedClaim,
        evidence: evidence
      });

      if (!evidence.trim()) {
        console.log('Evidence missing');
        evidenceError.textContent = 'Please enter evidence';
        evidenceError.style.display = 'block';
        return;
      }

      if (!window.validatedClaim) {
        console.log('No validated claim found');
        errorMessage.textContent = 'Please validate your claim first';
        showClaimStep();
        return;
      }

      // Set the final values
      claimInput.value = window.validatedClaim;
      
      console.log('Submitting form with:', {
        finalClaim: claimInput.value,
        finalEvidence: evidence
      });

      // Show loader before submitting
      if(submitLoader) {
        const saveAsDraftField = document.getElementById('save-as-draft-field');
        const loaderText = submitLoader.querySelector('.loader-text');

        if (loaderText && saveAsDraftField && saveAsDraftField.value === 'true') {
          loaderText.textContent = 'Saving claim...';
        } else if (loaderText) {
          loaderText.textContent = 'Submitting claim...';
        }
        
        submitLoader.classList.add('active');
      }

      // Disable the submit button
      submitButton.disabled = true;
      
      // Submit the form
      form.submit();
    });
  });

  function openDeleteClaimModal(claimId) {
    var modal = document.getElementById('delete-claim-modal');
    var form = document.getElementById('delete-claim-form');
    form.action = '/claims/' + claimId;
    modal.style.display = 'flex';
    document.body.classList.add('modal-open');
  }
  function closeDeleteClaimModal() {
    var modal = document.getElementById('delete-claim-modal');
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');
  }
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.my-claim-delete-link').forEach(function(link) {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        openDeleteClaimModal(this.getAttribute('data-claim-id'));
      });
    });
  });
<% end %>