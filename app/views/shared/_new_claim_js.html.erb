<script>
document.addEventListener('DOMContentLoaded', function() {
  const allSources = ['Quran', 'Tanakh', 'Catholic', 'Ethiopian', 'Protestant', 'Historical'];
  const claimInput = document.querySelector('textarea[name="claim[content]"]');
  const charCount = document.getElementById('claim-char-count');
  const claimSourceImgPath = document.getElementById('claim-source-img-path').value;
  const validateEvidenceBtn = document.getElementById('validate-evidence');
  const submitBtn = document.getElementById('submit-claim');
  const editEvidenceBtn = document.getElementById('edit-evidence-btn');
  const sourcesColumns = document.getElementById('sources-columns');
  const primarySourcesList = document.getElementById('primary-sources-list');
  const secondarySourcesList = document.getElementById('secondary-sources-list');
  const primarySourcesField = document.getElementById('primary-sources-field');
  const secondarySourcesField = document.getElementById('secondary-sources-field');
  const overlay = document.querySelector('.processing-overlay');
  const evidencesContainer = document.getElementById('evidences-container');
  const addEvidenceBtn = document.getElementById('add-evidence-btn');
  let processingTimeout;

  function showLoader() {
    overlay.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function hideLoader() {
    overlay.classList.remove('active');
    document.body.style.overflow = '';
  }

  function startProcessingTimeout() {
    processingTimeout = setTimeout(() => {
      hideLoader();
      const errorDiv = document.querySelector('.evidence-error');
      errorDiv.textContent = 'The request is taking longer than expected. Please try again.';
      errorDiv.style.display = 'block';
    }, 40000); // 80 seconds timeout
  }

  function clearProcessingTimeout() {
    if (processingTimeout) {
      clearTimeout(processingTimeout);
    }
  }

  function createSourceElement(source) {
    const div = document.createElement('div');
    div.className = 'source-item';
    div.setAttribute('data-source', source);
    div.draggable = true;
    div.innerHTML = `
      <img src='${claimSourceImgPath}' class='source-icon' alt=''/>
      <span>${source}</span>
    `;
    return div;
  }

  function updateHiddenFields() {
    const primarySources = Array.from(primarySourcesList.querySelectorAll('.source-item'))
      .map(item => item.getAttribute('data-source'));
    const secondarySources = Array.from(secondarySourcesList.querySelectorAll('.source-item'))
      .map(item => item.getAttribute('data-source'));
    
    primarySourcesField.value = JSON.stringify(primarySources);
    secondarySourcesField.value = JSON.stringify(secondarySources);
  }

  // Drag and Drop functionality
  function addDragListeners(element) {
    element.addEventListener('dragstart', (e) => {
      e.dataTransfer.setData('text/plain', e.target.getAttribute('data-source'));
      e.target.classList.add('dragging');
    });

    element.addEventListener('dragend', (e) => {
      e.target.classList.remove('dragging');
    });
  }

  [primarySourcesList, secondarySourcesList].forEach(list => {
    list.addEventListener('dragover', (e) => {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'move';
    });

    list.addEventListener('drop', (e) => {
      e.preventDefault();
      const source = e.dataTransfer.getData('text/plain');
      const sourceElement = document.querySelector(`.source-item[data-source="${source}"]`);
      
      if (sourceElement && sourceElement.parentElement !== e.currentTarget) {
        sourceElement.parentElement.removeChild(sourceElement);
        e.currentTarget.appendChild(sourceElement);
        updateHiddenFields();
      }
    });
  });

  // Helper to create evidence box with remove button
  function createEvidenceBox(value = '') {
    const wrapper = document.createElement('div');
    wrapper.className = 'evidence-box';
    // Create top flex container for badge only
    const top = document.createElement('div');
    top.className = 'evidence-box-top';
    // Badge placeholder (will be filled later)
    const badge = document.createElement('span');
    badge.className = 'evidence-source-badge';
    badge.style.display = 'none'; // Hide initially
    top.appendChild(badge);
    wrapper.appendChild(top);
    // Textarea
    const textarea = document.createElement('textarea');
    textarea.className = 'new-claim-input evidence-textarea';
    textarea.placeholder = 'Write your evidence...';
    textarea.rows = 4;
    textarea.value = value;
    wrapper.appendChild(textarea);
    // Remove button (now at right side of box)
    const removeBtn = document.createElement('button');
    removeBtn.type = 'button';
    removeBtn.className = 'remove-evidence-btn';
    removeBtn.innerHTML = '&minus;';
    removeBtn.title = 'Remove evidence';
    removeBtn.onclick = function() {
      if (evidencesContainer.querySelectorAll('.evidence-box').length > 1) {
        evidencesContainer.removeChild(wrapper);
      }
      updateRemoveButtonsState();
    };
    wrapper.appendChild(removeBtn);
    return wrapper;
  }

  function updateRemoveButtonsState() {
    const boxes = evidencesContainer.querySelectorAll('.evidence-box');
    boxes.forEach(box => {
      const btn = box.querySelector('.remove-evidence-btn');
      btn.disabled = boxes.length === 1 || addEvidenceBtn.disabled;
    });
  }

  // Initialize with one evidence box
  evidencesContainer.innerHTML = '';
  evidencesContainer.appendChild(createEvidenceBox());
  updateRemoveButtonsState();

  // Add Evidence button handler
  addEvidenceBtn.addEventListener('click', function() {
    if (addEvidenceBtn.disabled) return;
    evidencesContainer.appendChild(createEvidenceBox());
    updateRemoveButtonsState();
  });

  // Update validate evidence logic to collect all evidence values
  validateEvidenceBtn.addEventListener('click', async function() {
    // Always disable add evidence button immediately
    addEvidenceBtn.disabled = true;
    addEvidenceBtn.style.display = 'none'; // Hide add evidence button after validation
    const evidenceTextareas = evidencesContainer.querySelectorAll('.evidence-textarea');
    const evidences = Array.from(evidenceTextareas).map(t => t.value.trim()).filter(Boolean);

    if (evidences.length === 0) {
      document.querySelector('.evidence-error').textContent = 'Please provide at least one evidence before validating.';
      document.querySelector('.evidence-error').style.display = 'block';
      return;
    }

    showLoader();
    startProcessingTimeout();

    try {
      const response = await fetch('/claims/validate_evidence', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({ 
          evidence: evidences, // Send as array
          sources: allSources // Send all available sources for analysis
        })
      });

      clearProcessingTimeout();
      hideLoader();

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Validation failed');
      }

      const result = await response.json();
      
      // If backend returned a warning, show it and allow user to proceed
      if (result.warning) {
        document.querySelector('.evidence-error').textContent = result.warning;
        document.querySelector('.evidence-error').style.display = 'block';
      } else {
        document.querySelector('.evidence-error').style.display = 'none';
      }
      
      // Store the validated evidence sources for form submission
      window.validatedEvidences = result.evidences || [];
      
      // Insert source badge at the top of each evidence box
      const evidenceBoxes = evidencesContainer.querySelectorAll('.evidence-box');
      window.validatedEvidences.forEach((ev, idx) => {
        const box = evidenceBoxes[idx];
        if (!box) return;
        // Find the badge in the .evidence-box-top
        const top = box.querySelector('.evidence-box-top');
        const badge = top.querySelector('.evidence-source-badge');
        badge.textContent = ev.source ? ev.source.charAt(0).toUpperCase() + ev.source.slice(1) : '-';
        badge.style.display = 'inline-block';
      });
      
      // Hide illustration and show sources columns
      sourcesColumns.style.display = 'flex';
      
      // Disable all evidence textareas
      const evidenceTextareas = evidencesContainer.querySelectorAll('.evidence-textarea');
      evidenceTextareas.forEach(textarea => {
        textarea.readOnly = true;
        textarea.style.background = '#f3f4f6';
        textarea.style.color = '#23263b';
      });
      // Disable add evidence button
      addEvidenceBtn.disabled = true;
      // Disable all remove evidence buttons
      const removeBtns = evidencesContainer.querySelectorAll('.remove-evidence-btn');
      removeBtns.forEach(btn => btn.disabled = true);
      // Show edit evidence button
      editEvidenceBtn.style.display = 'inline-block';
      
      // Clear existing sources
      primarySourcesList.innerHTML = '';
      secondarySourcesList.innerHTML = '';
      
      // Add primary sources
      result.primary_sources.forEach(source => {
        const sourceElement = createSourceElement(source);
        addDragListeners(sourceElement);
        primarySourcesList.appendChild(sourceElement);
      });
      
      // Add secondary sources
      result.secondary_sources.forEach(source => {
        const sourceElement = createSourceElement(source);
        addDragListeners(sourceElement);
        secondarySourcesList.appendChild(sourceElement);
      });
      
      // Update hidden fields
      updateHiddenFields();
      
      // Show submit button and hide validate button
      validateEvidenceBtn.style.display = 'none';
      submitBtn.style.display = 'inline-block';
      
    } catch (error) {
      document.querySelector('.evidence-error').textContent = error.message || 'Failed to validate evidence. Please try again.';
      document.querySelector('.evidence-error').style.display = 'block';
    }
  });

  editEvidenceBtn.addEventListener('click', function() {
    // Re-enable all evidence textareas
    const evidenceTextareas = evidencesContainer.querySelectorAll('.evidence-textarea');
    evidenceTextareas.forEach(textarea => {
      textarea.readOnly = false;
      textarea.style.background = 'white';
      textarea.style.color = 'inherit';
    });
    // Enable add evidence button and show it
    addEvidenceBtn.disabled = false;
    addEvidenceBtn.style.display = 'inline-block';
    // Enable all remove evidence buttons (except if only one evidence box)
    const removeBtns = evidencesContainer.querySelectorAll('.remove-evidence-btn');
    const boxes = evidencesContainer.querySelectorAll('.evidence-box');
    removeBtns.forEach(btn => btn.disabled = boxes.length === 1);
    // Hide sources columns, show illustration, hide submit, show validate
    sourcesColumns.style.display = 'none';
    submitBtn.style.display = 'none';
    validateEvidenceBtn.style.display = 'inline-block';
    editEvidenceBtn.style.display = 'none';
    // Hide error
    const evidenceError = document.querySelector('.evidence-error');
    if (evidenceError) {
      evidenceError.style.display = 'none';
      evidenceError.textContent = '';
    }
  });

  // Character count for claim
  if (claimInput && charCount) {
    claimInput.addEventListener('input', function() {
      charCount.textContent = claimInput.value.length;
    });
    charCount.textContent = claimInput.value.length;
  }

  // Handle Escape key to cancel processing
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && overlay.classList.contains('active')) {
      hideLoader();
      clearProcessingTimeout();
    }
  });
});
</script> 