<script>
document.addEventListener('DOMContentLoaded', function() {
  const allSources = ['Quran', 'Tanakh', 'Catholic', 'Ethiopian', 'Protestant', 'Historical'];
  const claimInput = document.querySelector('textarea[name="claim[content]"]');
  const charCount = document.getElementById('claim-char-count');
  const claimSourceImgPath = document.getElementById('claim-source-img-path').value;
  const validateEvidenceBtn = document.getElementById('validate-evidence');
  const submitBtn = document.getElementById('submit-claim');
  const editEvidenceBtn = document.getElementById('edit-evidence-btn');
  const sourcesColumns = document.getElementById('sources-columns');
  const primarySourcesList = document.getElementById('primary-sources-list');
  const secondarySourcesList = document.getElementById('secondary-sources-list');
  const primarySourcesField = document.getElementById('primary-sources-field');
  const secondarySourcesField = document.getElementById('secondary-sources-field');
  const overlay = document.querySelector('.processing-overlay');
  const evidencesContainer = document.getElementById('evidences-container');
  let processingTimeout;

  function showLoader() {
    overlay.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function hideLoader() {
    overlay.classList.remove('active');
    document.body.style.overflow = '';
  }

  function startProcessingTimeout() {
    processingTimeout = setTimeout(() => {
      hideLoader();
      const errorDiv = document.querySelector('.evidence-error');
      errorDiv.textContent = 'The request is taking longer than expected. Please try again.';
      errorDiv.style.display = 'block';
    }, 40000); // 80 seconds timeout
  }

  function clearProcessingTimeout() {
    if (processingTimeout) {
      clearTimeout(processingTimeout);
    }
  }

  function createSourceElement(source) {
    const div = document.createElement('div');
    div.className = 'source-item';
    div.setAttribute('data-source', source);
    div.draggable = true;
    div.innerHTML = `
      <img src='${claimSourceImgPath}' class='source-icon' alt=''/>
      <span>${source}</span>
    `;
    return div;
  }

  function updateHiddenFields() {
    const primarySources = Array.from(primarySourcesList.querySelectorAll('.source-item'))
      .map(item => item.getAttribute('data-source'));
    const secondarySources = Array.from(secondarySourcesList.querySelectorAll('.source-item'))
      .map(item => item.getAttribute('data-source'));
    
    primarySourcesField.value = JSON.stringify(primarySources);
    secondarySourcesField.value = JSON.stringify(secondarySources);
  }

  // Drag and Drop functionality
  function addDragListeners(element) {
    element.addEventListener('dragstart', (e) => {
      e.dataTransfer.setData('text/plain', e.target.getAttribute('data-source'));
      e.target.classList.add('dragging');
    });

    element.addEventListener('dragend', (e) => {
      e.target.classList.remove('dragging');
    });
  }

  [primarySourcesList, secondarySourcesList].forEach(list => {
    list.addEventListener('dragover', (e) => {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'move';
    });

    list.addEventListener('drop', (e) => {
      e.preventDefault();
      const source = e.dataTransfer.getData('text/plain');
      const sourceElement = document.querySelector(`.source-item[data-source="${source}"]`);
      
      if (sourceElement && sourceElement.parentElement !== e.currentTarget) {
        sourceElement.parentElement.removeChild(sourceElement);
        e.currentTarget.appendChild(sourceElement);
        updateHiddenFields();
      }
    });
  });

  // Evidence handling - New AI-assisted system
  // The old evidence creation logic has been removed
  // Evidence units are now handled by _evidence_units_js.html.erb

  // Update validate evidence logic to work with new evidence units
  if (validateEvidenceBtn) {
    validateEvidenceBtn.addEventListener('click', async function() {
      console.log('Validate evidence button clicked');
      
      // Check if we have any evidence units
      const evidenceUnits = document.querySelectorAll('.evidence-unit');
      
      if (evidenceUnits.length === 0) {
        document.querySelector('.evidence-error').textContent = 'Please add at least one evidence before validating.';
        document.querySelector('.evidence-error').style.display = 'block';
        return;
      }

      // Collect evidence from the combined field (set by evidence units JS)
      const combinedEvidenceField = document.getElementById('combined-evidence-field');
      const evidenceData = combinedEvidenceField.value ? JSON.parse(combinedEvidenceField.value) : [];
      
      if (evidenceData.length === 0) {
        document.querySelector('.evidence-error').textContent = 'Please add at least one evidence before validating.';
        document.querySelector('.evidence-error').style.display = 'block';
        return;
      }

      showLoader();
      startProcessingTimeout();

      try {
        console.log('Updating evidence sources hash...');
        // Update evidence sources hash from current evidence units
        updateEvidenceSourcesHash();
        
        console.log('Determining primary and secondary sources...');
        // Use frontend source management instead of backend validation
        const sources = determinePrimaryAndSecondarySources();
        
        console.log('Sources determined:', sources);
        
        clearProcessingTimeout();
        hideLoader();

        // Hide error if any
        document.querySelector('.evidence-error').style.display = 'none';
        
        // Store the evidence data for form submission
        window.validatedEvidences = evidenceData.map(unit => ({
          evidence: unit,
          sources: sources.primary.concat(sources.secondary)
        }));
        
        // Hide illustration and show sources columns
        const sourcesColumns = document.getElementById('sources-columns');
        if (sourcesColumns) {
          console.log('Showing sources columns...');
          sourcesColumns.style.display = 'flex';
        }
        
        // Disable evidence units (make them read-only)
        const evidenceUnits = document.querySelectorAll('.evidence-unit');
        evidenceUnits.forEach(unit => {
          unit.style.opacity = '0.7';
          unit.style.pointerEvents = 'none';
        });
        
        // Update sources UI using frontend logic
        console.log('Updating sources UI...');
        updateSourcesUI();
        
        // Show submit button and hide validate button
        validateEvidenceBtn.style.display = 'none';
        const submitBtn = document.getElementById('submit-claim');
        if (submitBtn) submitBtn.style.display = 'inline-block';
        
        console.log('Evidence validation completed successfully');
        
      } catch (error) {
        console.error('Error during evidence validation:', error);
        clearProcessingTimeout();
        hideLoader();
        document.querySelector('.evidence-error').textContent = error.message || 'Failed to validate evidence. Please try again.';
        document.querySelector('.evidence-error').style.display = 'block';
      }
    });
  }

  if (editEvidenceBtn) {
    editEvidenceBtn.addEventListener('click', function() {
    // Re-enable all evidence units
    const evidenceUnits = document.querySelectorAll('.evidence-unit');
    evidenceUnits.forEach(unit => {
      unit.style.opacity = '1';
      unit.style.pointerEvents = 'auto';
    });
    // Hide sources columns, show illustration, hide submit, show validate
    sourcesColumns.style.display = 'none';
    submitBtn.style.display = 'none';
    validateEvidenceBtn.style.display = 'inline-block';
    editEvidenceBtn.style.display = 'none';
    // Hide error
    const evidenceError = document.querySelector('.evidence-error');
    if (evidenceError) {
      evidenceError.style.display = 'none';
      evidenceError.textContent = '';
    }
  });
  }

  // Character count for claim
  if (claimInput && charCount) {
    claimInput.addEventListener('input', function() {
      charCount.textContent = claimInput.value.length;
    });
    charCount.textContent = claimInput.value.length;
  }

  // Handle Escape key to cancel processing
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && overlay.classList.contains('active')) {
      hideLoader();
      clearProcessingTimeout();
    }
  });
});
</script> 